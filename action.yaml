# Action's main info
name: "Packj Audit"
description: "Use Packj to identify malicious/risky Python PyPI, NPM, and RubyGems dependencies"

# Action's author name
author: "Ossillate, Inc."

# Action's branding data for GitHub Marketplace
branding:
  icon: "package" # icon name from Feather open source icons pack
  color: "orange"

on: [pull_request]

permissions:
  contents: read
  
#inputs: 
#  OSSIEBOT_ID:
#    required: true
#  REPO_TOKEN:
#    required: true
    
runs:
  using: composite
  steps: 
    # Install Packj tool
    - name: Checkout packj
      uses: actions/checkout@v3
      with:
        repository: sbmthakur/packj
        path: packj
        ref: yaml
    - name: Setup pack
      shell: bash
      run: |
        sudo apt install python3-testresources
        pip3 install -r packj/requirements.txt
        pip3 install --upgrade urllib3
        
        echo "Checking for packj.yaml"
        [[ -f packj.yaml ]] && echo "Copying packj.yaml" && cp packj.yaml packj/

        echo '<table>' >> body.htm
        
        analyze () {
          cd packj
          echo "Processing $2"
          python3 main.py audit $1 $2 $3 &>audit.out
          #output=$(tail -n 2 audit.out | head -n 1)          
          cd ..
          echo "<td>$output</td>" >> body.htm
        }

        npm_analyze() {
          deps=$(jq -r '.dependencies | to_entries |map("\(.key)==\(.value|tostring)")|.[]' package.json)
          depsArr=(${deps// /})

          for i in "${depsArr[@]}"
          do
          i=${i/^/}
          i=${i/~/}
          arr=(${i//==/ })
          package=${arr[0]}
          version=${arr[1]}
          
          echo "<tr>" >> body.htm
          echo "<td>$package</td>" >> body.htm
          
          analyze npm $package $version
          echo "</tr>" >> body.htm
          done
        }

        pypi_analyze() {
          while read p; do
            arr=(${p//==/ })
            package=${arr[0]}
            version=${arr[1]}
            analyze pypi $package $version
          done <requirements.txt
        }

        gem_analyze() {
          arr=($(grep '^gem ' Gemfile | awk '/ / { print $2 }' | sed -E 's/,|"//g'))

          for i in ${arr[@]}
          do
            analyze rubygems $i
          done
        }

        [[ -f package.json ]] && echo "Running packj for NPM" && npm_analyze
        #[[ -f requirements.txt ]] && echo "Running packj for PYPI" && pypi_analyze
        #[[ -f Gemfile ]] && echo "Running packj for gems" && gem_analyze
        
        echo "</table>" >> body.htm
        
        cat body.htm
        
    # Install Packj tool
#    - name: install Packj.dev client
#      run: pip3 install ossie
#      shell: bash
#
#    # Audit the Repository
#    - name: Audit project dependencies
#      run: |
#        ossie audit --id ${{ inputs.OSSIEBOT_ID }} --project ${{ github.workspace }}
#        echo "ISSUE_REQUIRED=$(cat /tmp/issue_required.txt)" >> $GITHUB_ENV
#        
#        lines=$(wc -l /tmp/issue_body.txt | cut -f1 -d ' ')
#        echo "ISSUE_TITLE=$(($lines - 1)) Undesirable/Risky Dependencies found" >> $GITHUB_ENV
#        
#        echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
#        
#        echo "<a href=\"https://packj.dev\"><img src=\"https://packj.dev/static/img/box-package.svg\" width=\"80\"></a>" >> $GITHUB_ENV
#        
#        echo "$(head -n -1 /tmp/issue_body.txt | head -n5)" >> $GITHUB_ENV
#        #echo "#######"
#        #echo "$(cat /tmp/issue_body.txt)"
#        #echo "$(cat /tmp/issue_body.txt)" >> $GITHUB_ENV
#        
#        [[ ${lines} > 6 ]] && echo "and more..." >> $GITHUB_ENV
#        
#        last_line=$(tail -n1 /tmp/issue_body.txt)
#        echo "$last_line" >> $GITHUB_ENV
#        echo "EOF" >> $GITHUB_ENV
#        
#      shell: bash
#
#    - name: create issue if ISSUE_REQUIRED is set
#      if: ${{ env.ISSUE_REQUIRED == 'YES'}}
#      uses: rishabhgupta/git-action-issue@v2
#      with:
#        token: ${{ inputs.REPO_TOKEN }}
#        title: ${{ env.ISSUE_TITLE }}
#        body: ${{ env.ISSUE_BODY }}
